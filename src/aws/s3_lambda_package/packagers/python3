# Note: This is meant to be sourced by the packager script, not invoked directly

# Make sure our runtime exists on this system
type "${RUNTIME}"

# CD into the project
cd "${SOURCE_PATH}"

# Set up a virtualenv if your package requires it
if [ -f "requirements.txt" ] ; then

  # The temporary directory where our libs are stored
  LIB_PATH="$(mktemp -d "${TF_PATH}/.tmp_dir.XXXXXXXX")"

  # Invoke the pip module of the current runtime, and install dependencies
  "${RUNTIME}" -m pip install --target "${LIB_PATH}" -r "requirements.txt"

  # Zip up our installed libs
  cd "${LIB_PATH}"
  zip -r "${PACKAGE_ZIP}" .

  # Return to the source path
  cd "${SOURCE_PATH}"

  # Delete the temporary lib dir. We don't need it anymore
  rm -Rf --preserve-root "${LIB_PATH}"

fi

# If there's a "build.sh" present, invoke it. The build process should leave the working directory in a ready-to-package state
[ -f "build_lambda.sh" ] && ./build_lambda.sh

# Finish packaging up the rest of the project into the zip
zip -x "__pycache__/*" "build.sh" "requirements.txt" -r "${PACKAGE_ZIP}" .
